<?php
/**
 * @file
 * Theme functions
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function tm_theme_alpha_preprocess_html(&$variables) {

  /** @var \Drupal\user\UserInterface $account */
  $account = \Drupal::currentUser()->getAccount();
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    if ($node->hasField('field_hide_header') && $node->field_hide_header->value) {
      $variables['attributes']['class'][] = 'header--hide';
    }
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('page--node--' . $node->id());
  }

  $system_path = \Drupal::service('path.current')->getPath();
  $page_path = explode('/', $system_path)[1];
  if (!empty($page_path)) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('path--' . $page_path);
  }

  if (!empty($variables['page']['sidebar_left']) && !empty($variables['page']['sidebar_right'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('has-sidebar-both');
  }
  elseif (!empty($variables['page']['sidebar_left'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('has-sidebar-left');
  }
  elseif (!empty($variables['page']['sidebar_right'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('has-sidebar-right');
  }

  if ($account->isAuthenticated()) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('user--auth');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('user--anon');
  }

}

/**
 * Implements hook_preprocess_page().
 */
function tm_theme_alpha_preprocess_page(&$variables) {
  // Check if page is panel pages.
  $route_options = \Drupal::routeMatch()->getRouteObject()->getOptions();
  if (isset($route_options['parameters']['page_manager_page'])) {
    $variables['attributes']->addClass(Html::cleanCssIdentifier('page-panel'));
  }
  else {
    $variables['attributes']->addClass(Html::cleanCssIdentifier('page-standard'));
  }
}

/**
 * Implements template_preprocess_block().
 */
function tm_theme_alpha_preprocess_block(&$variables) {

  if (!empty($variables['label'])) {
    if(is_string($variables['label'])) {
      $variables['label'] = [
        '#markup' => $variables['label'],
      ];
    }
  }

  // Custom block type helper classes.
  if (isset($variables['elements']['content']['#block_content'])) {
    $bundle = $variables['elements']['content']['#block_content']->bundle();
    $bundle_class = str_replace('_', '-', $bundle);
    if (isset($variables['attributes']['class'])) {
      $variables['attributes']['class'][] = Html::cleanCssIdentifier('block--bundle--' . $bundle_class);
      $variables['attributes']['data-bundle-class'] = $bundle_class;
    }
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('block--id--' . $variables['elements']['content']['#block_content']->id());
  }

  if (!empty($variables['elements']['#base_plugin_id']) && ($variables['elements']['#base_plugin_id'] == 'block_content')) {

    /** @var \Drupal\block_content\BlockContentInterface $block_content */
    $block_content = $variables['elements']['content']['#block_content'];

    if ($block_content->hasField('field_label_highlight')) {
      if ($block_content->field_label_highlight->value) {
        $variables['attributes']['class'][] = 'block--highlight-label';
      }
    }

    if ($block_content->hasField('field_style')) {
      if ($style = $block_content->field_style->value) {
        $variables['attributes']['class'][] = 'block--style--' . Html::cleanCssIdentifier($style);
        $variables['attributes']['class'][] = 'panel';
        $variables['attributes']['class'][] = 'panel-default';
      }
    }

    if ($block_content->hasField('field_icon')) {
      if ($icon = $block_content->field_icon->value) {
        $variables['title_attributes']['class'][] = $icon;
      }
    }

    if ($block_content->hasField('field_class')) {
      // $variables['attributes']['class'][] = 'sticky-scroll';
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function tm_theme_alpha_preprocess_ds_entity_view(&$variables) {

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $variables['content']['#entity'];

  $variables['content']['#attributes']['class'][] = Html::cleanCssIdentifier('entity-display');

  if (!empty($variables['content']['#entity_type'])) {
    $variables['content']['#attributes']['class'][] = Html::cleanCssIdentifier('entity-type--' . $variables['content']['#entity_type']);
  }

  if (!empty($variables['content']['#bundle'])) {
    $variables['content']['#attributes']['class'][] = Html::cleanCssIdentifier('bundle--' . $variables['content']['#bundle']);
  }

  if (!empty($variables['content']['#view_mode'])) {
    $variables['content']['#attributes']['class'][] = Html::cleanCssIdentifier('view-mode--' . $variables['content']['#view_mode']);
  }

  if ($entity->hasField('field_image') && !empty($entity->field_image->target_id)) {
    $variables['content']['#attributes']['class'][] = Html::cleanCssIdentifier('entity--has-image');
  }
  else {
    $variables['content']['#attributes']['class'][] = Html::cleanCssIdentifier('entity--no-image');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Changes vertical tabs to container and adds meta information.
 * Code borrowed from Seven theme.
 */
function tm_theme_alpha_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = [
    '#attributes' => ['class' => ['entity-meta__header']],
    '#type'       => 'container',
    '#group'      => 'advanced',
    '#weight'     => -100,
    'published'   => [
      '#type'       => 'html_tag',
      '#tag'        => 'h3',
      '#value'      => $node->isPublished() ? t('Published') : t('Not published'),
      '#access'     => !$node->isNew(),
      '#attributes' => [
        'class' => [
          'entity-meta__title',
        ],
      ],
    ],
    'changed'     => [
      '#type'               => 'item',
      '#wrapper_attributes' => [
        'class' => [
          'entity-meta__last-saved',
          'container-inline',
        ],
      ],
      '#markup'             => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
    ],
    'author'      => [
      '#type'               => 'item',
      '#wrapper_attributes' => [
        'class' => [
          'author',
          'container-inline',
        ],
      ],
      '#markup'             => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()
          ->getUsername(),
    ],
  ];
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}

/**
 * @param $variables
 */
function tm_theme_alpha_preprocess_field__node__title(&$variables) {
  foreach ($variables['items'] as $key => &$item) {
    if (!empty($item['content']['#context']['value'])) {
      $variables['items'][0]['content'] = [
        '#type' => 'html_tag',
        '#tag' => 'h1',
        '#value' => $item['content']['#context']['value'],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tm_theme_alpha_preprocess_input(&$variables) {
  $element = $variables['element'];
  // Add the element type to the theme.
  $variables['type'] = $element['#type'];
}

/**
 * Implements template_preprocess_HOOK().
 */
function tm_theme_alpha_preprocess_form_element(&$variables) {
  // Render the form element inside the label for checkbox and radio.
  if (in_array($variables['element']['#type'], ['checkbox', 'radio'])) {
    $variables['children'] = $variables['element']['#children'];
    // Checkbox needs to be next to label to style correctly.
    // unset($variables['children']);
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function tm_theme_alpha_preprocess_views_exposed_form(&$variables) {
  // @todo get attributes from exposed form to apply without this hack.
  if (!empty($variables['form']['#attributes_original'])) {
    $variables['attributes'] = $variables['form']['#attributes_original'];
  }
}
