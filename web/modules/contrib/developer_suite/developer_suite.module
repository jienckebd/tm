<?php

/**
 * @file
 * Provides a suite of tools for developers.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\developer_suite\Hook\HookCronInterface;
use Drupal\developer_suite\Hook\HookEntityDeleteInterface;
use Drupal\developer_suite\Hook\HookEntityExtraFieldInfoInterface;
use Drupal\developer_suite\Hook\HookEntityInsertInterface;
use Drupal\developer_suite\Hook\HookEntityLoadInterface;
use Drupal\developer_suite\Hook\HookEntityPreDeleteInterface;
use Drupal\developer_suite\Hook\HookEntityPreSaveInterface;
use Drupal\developer_suite\Hook\HookEntityUpdateInterface;
use Drupal\developer_suite\Hook\HookEntityViewInterface;
use Drupal\developer_suite\Hook\HookFormAlterInterface;
use Drupal\developer_suite\Hook\HookPreProcessInterface;
use Drupal\developer_suite\Hook\HookThemeInterface;

/**
 * Implements hook_entity_type_alter().
 */
function developer_suite_entity_type_alter(array &$entityTypes) {
  /** @var \Drupal\Component\Plugin\PluginManagerInterface $pluginManager */
  $pluginManager = Drupal::service('plugin.manager.developer_suite.entity_type_class_manager');

  foreach ($pluginManager->getDefinitions() as $pluginId => $pluginData) {
    if (isset($entityTypes[$pluginData['entity']])) {
      $entityTypes[$pluginData['entity']]->setHandlerClass('storage', $pluginData['class']);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function developer_suite_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $hookPlugin = _get_hook_plugin('form_alter');

  if ($hookPlugin instanceof HookFormAlterInterface) {
    $hookPlugin->execute($form, $form_state, $form_id);
  }
}

/**
 * Implements hook_entity_insert().
 */
function developer_suite_entity_insert(EntityInterface $entity) {
  $hookPlugin = _get_hook_plugin('entity_insert');

  if ($hookPlugin instanceof HookEntityInsertInterface) {
    $hookPlugin->execute($entity);
  }
}

/**
 * Implements hook_entity_presave().
 */
function developer_suite_entity_presave(EntityInterface $entity) {
  $hookPlugin = _get_hook_plugin('entity_presave');

  if ($hookPlugin instanceof HookEntityPreSaveInterface) {
    $hookPlugin->execute($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function developer_suite_entity_update(EntityInterface $entity) {
  $hookPlugin = _get_hook_plugin('entity_update');

  if ($hookPlugin instanceof HookEntityUpdateInterface) {
    $hookPlugin->execute($entity);
  }
}

/**
 * Implements hook_entity_predelete().
 */
function developer_suite_entity_predelete(EntityInterface $entity) {
  $hookPlugin = _get_hook_plugin('entity_predelete');

  if ($hookPlugin instanceof HookEntityPreDeleteInterface) {
    $hookPlugin->execute($entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function developer_suite_entity_delete(EntityInterface $entity) {
  $hookPlugin = _get_hook_plugin('entity_delete');

  if ($hookPlugin instanceof HookEntityDeleteInterface) {
    $hookPlugin->execute($entity);
  }
}

/**
 * Implements hook_entity_create().
 */
function developer_suite_entity_create(EntityInterface $entity) {
  $hookPlugin = _get_hook_plugin('entity_create');

  if ($hookPlugin instanceof HookEntityDeleteInterface) {
    $hookPlugin->execute($entity);
  }
}

/**
 * Implements hook_entity_load().
 */
function developer_suite_entity_load(array $entities, $entity_type_id) {
  $hookPlugin = _get_hook_plugin('entity_load');

  if ($hookPlugin instanceof HookEntityLoadInterface) {
    $hookPlugin->execute($entities, $entity_type_id);
  }
}

/**
 * Implements hook_entity_view().
 */
function developer_suite_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $hookPlugin = _get_hook_plugin('entity_view');

  if ($hookPlugin instanceof HookEntityViewInterface) {
    $hookPlugin->execute($build, $entity, $display, $view_mode);
  }
}

/**
 * Implements hook_cron().
 */
function developer_suite_cron() {
  $hookPlugin = _get_hook_plugin('cron');

  if ($hookPlugin instanceof HookCronInterface) {
    $hookPlugin->execute();
  }
}

/**
 * Implements hook_preprocess().
 */
function developer_suite_preprocess(&$variables, $hook) {
  $hookPlugin = _get_hook_plugin('preprocess');

  if ($hookPlugin instanceof HookPreProcessInterface) {
    $hookPlugin->execute($variables, $hook);
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function developer_suite_entity_extra_field_info() {
  $hookPlugin = _get_hook_plugin('entity_extra_field_info');

  if ($hookPlugin instanceof HookEntityExtraFieldInfoInterface) {
    return $hookPlugin->execute();
  }
}

/**
 * Implements hook_theme().
 */
function developer_suite_theme($existing, $type, $theme, $path) {
  $hookPlugin = _get_hook_plugin('theme');

  if ($hookPlugin instanceof HookThemeInterface) {
    return $hookPlugin->execute($existing, $type, $theme, $path);
  }

  return [];
}

/**
 * Returns the hook plugin object by hook ID.
 *
 * @param string $hookPluginId
 *   The hook plugin ID.
 *
 * @return bool|\Drupal\developer_suite\Hook\HookInterface
 *   The hook plugin object or FALSE.
 */
function _get_hook_plugin($hookPluginId) {
  /** @var \Drupal\developer_suite\HookBuilderInterface $hookPluginBuilder */
  $hookPluginBuilder = Drupal::service('developer_suite.hook_builder');

  return $hookPluginBuilder->build($hookPluginId);
}
