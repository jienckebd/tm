<?php

/**
 * @file
 * Configuration cn_core functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Element;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Database\Query\AlterableInterface;

require_once "cn_core.theme.inc";

/**
 * @param array $entity_types
 */
function cn_core_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['node']->setFormClass('default', \Drupal\cn_core\Form\NodeForm::class);
  $entity_types['node']->setFormClass('anonymous', \Drupal\cn_core\Form\NodeForm::class);
  $entity_types['node']->setFormClass('modal', \Drupal\cn_core\Form\ModalNodeForm::class);
  $entity_types['node']->setFormClass('add', \Drupal\cn_core\Form\NodeForm::class);
  $entity_types['node']->setFormClass('edit', \Drupal\cn_core\Form\NodeForm::class);

  $entity_types['user']->setFormClass('register', \Drupal\cn_core\Form\User\RegisterForm::class);
  $entity_types['user']->setClass(\Drupal\cn_core\Entity\User::class);

  if (!empty($entity_types['media'])) {
    $entity_types['media']->setFormClass('default', \Drupal\cn_core\Form\ContentEntityForm::class);
    $entity_types['media']->setFormClass('add', \Drupal\cn_core\Form\ContentEntityForm::class);
    $entity_types['media']->setFormClass('edit', \Drupal\cn_core\Form\ContentEntityForm::class);
    $entity_types['media']->setHandlerClass('inline_form', \Drupal\cn_core\Form\MediaInlineForm::class);
  }

  if (!empty($entity_types['contact_message'])) {
    $entity_types['contact_message']->setFormClass('default', \Drupal\cn_core\Form\MessageForm::class);
  }

  if (!empty($entity_types['taxonomy_term'])) {
    $entity_types['taxonomy_term']->setFormClass('default', \Drupal\cn_core\Form\TermForm::class);
    $entity_types['taxonomy_term']->setClass(\Drupal\cn_core\Entity\Term::class);
    $term_keys = $entity_types['taxonomy_term']->getKeys();
    $term_keys['published'] = 'status';
    $entity_types['taxonomy_term']->set('entity_keys', $term_keys);
    $entity_types['taxonomy_term']->addConstraint('UniqueEntityLabel');
  }

  foreach ($entity_types as $key => $entity_type) {
    $link_templates = $entity_type->getLinkTemplates();
    if (!empty($link_templates['canonical'])) {
      $entity_type->setLinkTemplate('view_mode', '/entity/view/{entity_type}/{entity_id}/{view_mode}');
    }
  }

  foreach ($entity_types as $key => $entity_type) {
    if ($entity_type->getDataTable()) {
      $entity_types[$key]->setFormClass('modal', \Drupal\cn_core\Form\ModalContentEntityForm::class);
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function cn_core_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  $entity_type_id = $entity_type->id();
  if ($entity_type_id == 'node') {
    $fields['title']->setDisplayConfigurable('view', TRUE);
    $fields['status']->setDisplayConfigurable('view', TRUE);
    $fields['status']->setDisplayConfigurable('form', TRUE);
  }
  elseif ($entity_type_id == 'user_test') {
    $fields['name']->setDisplayConfigurable('form', TRUE);
    $fields['mail']->setDisplayConfigurable('form', TRUE);
    $fields['pass']->setDisplayConfigurable('form', TRUE);
    $fields['created']->setDisplayConfigurable('form', TRUE);
    $fields['changed']->setDisplayConfigurable('form', TRUE);
    $fields['roles']->setDisplayConfigurable('form', TRUE);
  }
  elseif ($entity_type_id == 'taxonomy_term') {
    // $fields['name']->addConstraint('UniqueFieldValue');
    // $fields['weight']->setDisplayConfigurable('view', TRUE);
    // $fields['weight']->setDisplayConfigurable('form', TRUE);
  }
}

/**
 * Implements hook_entity_insert().
 */
function cn_core_entity_insert(EntityInterface $entity) {
  cn_core_entity_insert_update($entity);
}

/**
 * Implements hook_entity_update().
 */
function cn_core_entity_update(EntityInterface $entity) {
  cn_core_entity_insert_update($entity);
}

function cn_core_entity_insert_update(EntityInterface $entity) {
  if (!method_exists($entity, 'hasField')) {
    return;
  }

  if ($entity->hasField('field_entity_queue')) {
    \Drupal::service('entity.queue_manager')->processEntity($entity);
  }

  if ($entity->getEntityTypeId() == 'entity_subqueue') {
    \Drupal::service('entity.queue_manager')->processQueue($entity);
  }
}

/**
 * Implements hook_entity_field_access().
 */
function cn_core_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL) {

  if (!empty($items)) {
    $entity = $items->getEntity();
    $field_name = $field_definition->getName();
    $field_name_role_access = "field_role_{$field_name}";
    if ($entity->hasField($field_name_role_access)) {
      if ($field_value_roles = $entity->get($field_name_role_access)->getValue()) {
        $allowed_roles = [];
        foreach ($field_value_roles as $key => $data) {
          $allowed_roles[] = $data['target_id'];
        }
        $user_roles = $account->getRoles();
        if (array_intersect($allowed_roles, $user_roles)) {
          return AccessResult::neutral();
        }
        return AccessResult::forbidden();
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * @param $blocks
 */
function cn_core_block_alter($blocks) {
  foreach ($blocks as $key => $block) {
    if ($block['provider'] == 'block_content') {
      $blocks[$key]['class'] = '\Drupal\cn_core\Plugin\BlockContentBlock';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cn_core_form_search_block_form_alter(&$form, FormStateInterface $form_state) {
  $form['keys']['#attributes']['placeholder'] = t('Type to search...');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cn_core_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  \Drupal::service('form_builder')->preserveFormAction($form);

  $storage = $form_state->getStorage();

  /** @var \Drupal\views\ViewExecutable $view */
  $view = $storage['view'];

  $search_keys = [
    'keys',
    'keywords',
    'search_api_fulltext',
  ];

  foreach ($search_keys as $search_key) {
    if (!empty($form[$search_key])) {
      $form[$search_key]['#attributes']['placeholder'] = t('Type to search...');
      $form[$search_key]['#attributes']['class'][] = 'autofocus';
      $form[$search_key]['#title_display'] = 'invisible';
      break;
    }
  }

  $date_keys = [
    'field_date',
    'field_date_1',
    'field_date_value',
    'field_date_value_1',
    'created',
    'created_1',
  ];

  $has_date_fields = FALSE;

  $form['dates'] = [
    '#type' => 'details',
    '#title' => t('Dates'),
    '#open' => TRUE,
    '#attributes' => [
      'class' => [
        'clear-both',
      ],
    ],
  ];

  foreach ($date_keys as $key) {
    if (!empty($form[$key])) {

      if (!empty($form['#info']['filter-' . $key]['label'])) {
        $label = $form['#info']['filter-' . $key]['label'];
        $form[$key]['#title'] = $label;
      }

      // Move dates to within details.
      $form[$key]['#type'] = 'date';
      $form['dates'][$key] = $form[$key];
      unset($form[$key]);

      // Flag as having date fields.
      $has_date_fields = TRUE;
    }
  }

  if ($has_date_fields == FALSE) {
    unset($form['dates']);
  }

  $form_class = Html::cleanCssIdentifier('views-exposed-form--' . $view->id());
  $form['#attributes']['class'][] = $form_class;

  $view_tags = explode(',', $view->storage->get('tag'));

  if (in_array('filter-enhanced', $view_tags)) {
    $form['#attributes']['class'][] = 'views-exposed-form--filter-enhanced';
    if (!empty($form['sort_bef_combine'])) {
      $form['sort_bef_combine']['#title_display'] = 'invisible';
    }

    foreach (Element::children($form) as $key => $child_id) {
      if (is_array($form[$child_id]) && !empty($form[$child_id]['#type']) && (!empty($form[$child_id]['#type']) && $form[$child_id]['#type'] == 'select') || (!empty($form[$child_id]['#type']) && $form[$child_id]['#type'] == 'textfield')) {
        $label = !empty($form['#info']['filter-' . $child_id]) ? $form['#info']['filter-' . $child_id]['label'] : t('Select');
        $label .= "...";
        $form[$child_id]['#title_display'] = 'invisible';
        $form[$child_id]['#attributes']['data-placeholder'] = $label;
        $form[$child_id]['#attributes']['placeholder'] = $label;
      }
    }

  }

  $form['#attributes_original'] = $form['#attributes'];
}

/**
 * Implements hook_form_alter().
 */
function cn_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_class = Html::cleanCssIdentifier('form--' . $form_id);
  $form['#attributes']['class'][] = $form_class;

  if (preg_match("/^views_form_/", $form_id)) {
    // \Drupal::service('form_builder')->preserveFormAction($form);
  }
}

/**
 * Implements hook_ajax_render_alter().
 */
function cn_core_ajax_render_alter(&$commands) {
  foreach ($commands as $key => $command) {
    if (isset($command['method']) && ($command['method'] == 'replaceWith')) {
      $commands[$key]['effect'] = 'fade';
    }
  }
}

/**
 * @param $array
 * @param $original_key
 * @param $new_key
 * @return array
 */
function cn_core_array_change_key(&$array, $original_key, $new_key) {

  if (!array_key_exists($original_key, $array)) {
    return $array;
  }

  $keys = array_keys($array);
  $keys[array_search($original_key, $keys)] = $new_key;

  $array = array_combine($keys, $array);
  return $array;
}

/**
 * Implements hook_module_implements_alter().
 */
function cn_core_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'user_format_name_alter') {
    if (isset($implementations['realname'])) {
      unset($implementations['realname']);
    }
  }
}

/**
 * Implements hook_library_info_alter().
 */
function cn_core_library_info_alter(&$libraries, $extension) {
  if ($extension == 'core' && isset($libraries['jquery.ui'])) {
    $libraries_path = drupal_get_path('module', 'cn_core') . '/libraries';

    $new_path = "/{$libraries_path}/jquery.ui/css/theme.css";
    cn_core_array_change_key($libraries['jquery.ui']['css']['theme'], 'assets/vendor/jquery.ui/themes/base/theme.css', $new_path);

    $new_path = "/{$libraries_path}/jquery.ui.dialog/css/dialog.css";
    cn_core_array_change_key($libraries['jquery.ui.dialog']['css']['component'], 'assets/vendor/jquery.ui/themes/base/dialog.css', $new_path);

    $replacements = [
      'jquery.ui.dialog',
    ];

  }
  elseif ($extension == 'font_field_icon') {
    unset($libraries['font_field_icon']['css']['component']);
  }
  elseif ($extension == 'seven') {
    $admin_theme_path = drupal_get_path('theme', 'tm_theme_admin');

    $new_path = "/{$admin_theme_path}/css/base/elements.css";
    cn_core_array_change_key($libraries['global-styling']['css']['base'], 'css/base/elements.css', $new_path);

    $new_path = "/{$admin_theme_path}/css/components/entity-meta.css";
    cn_core_array_change_key($libraries['global-styling']['css']['component'], 'css/components/entity-meta.css', $new_path);

    $new_path = "/{$admin_theme_path}/css/components/form.css";
    cn_core_array_change_key($libraries['global-styling']['css']['component'], 'css/components/form.css', $new_path);

    $new_path = "/{$admin_theme_path}/css/components/tabs.css";
    cn_core_array_change_key($libraries['global-styling']['css']['component'], 'css/components/tabs.css', $new_path);

    $new_path = "/{$admin_theme_path}/css/components/buttons.css";
    cn_core_array_change_key($libraries['global-styling']['css']['component'], 'css/components/buttons.css', $new_path);

    $new_path = "/{$admin_theme_path}/css/components/breadcrumb.css";
    cn_core_array_change_key($libraries['global-styling']['css']['component'], 'css/components/breadcrumb.css', $new_path);

    $new_path = "/{$admin_theme_path}/css/layout/layout.css";
    cn_core_array_change_key($libraries['global-styling']['css']['layout'], 'css/layout/layout.css', $new_path);
  }
  elseif ($extension == 'adminimal_theme') {
    $admin_theme_path = drupal_get_path('theme', 'tm_theme_admin');
    $new_path = "/{$admin_theme_path}/css/adminimal.css";
    cn_core_array_change_key($libraries['global-styling']['css']['base'], 'css/adminimal.css', $new_path);
  }
}

/**
 * Implements hook_entity_presave().
 */
function cn_core_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof \Drupal\Core\Entity\ContentEntityInterface) {
    $entity_type_manager = \Drupal::entityTypeManager();
    if ($entity->hasField('field_summary') && $entity->hasField('field_content')) {
      $paragraph_storage = $entity_type_manager->getStorage('paragraph');
      $summary = NULL;
      foreach ($entity->get('field_content')->getValue() as $key => $value) {
        if (!empty($value['target_id'])) {
          $paragraph = $paragraph_storage->load($value['target_id']);
          if (!empty($paragraph->bundle() == 'copy')) {
            $summary = cn_core_text_summary($paragraph->field_content->value, 300);
            if (empty($entity->field_summary->value) && !empty($summary)) {
              $entity->field_summary->value = strip_tags($summary);
            }
            break;
          }
        }
      }
    }

    // Set the format to rich_text if not set.
    if ($entity->hasField('field_content')) {
      $content_values = $entity->get('field_content')->getValue();
      $format_set = FALSE;
      foreach ($content_values as $delta => $content_value) {
        if (!empty($content_value['value']) && empty($content_value['format'])) {
          $content_values[$delta]['format'] = 'rich_text';
          $format_set = TRUE;
        }
      }
      if ($format_set == TRUE) {
        $entity->set('field_content', $content_values);
      }
    }
  }
}

/**
 * Helper function to provide text summary.
 */
function cn_core_text_summary($text, $size = 300, $wordsafe = TRUE, $add_ellipsis = TRUE, $min_wordsafe_length = 2) {
  $text = str_replace('&nbsp;', ' ', $text);
  $text = strip_tags($text);
  $text = Unicode::truncate($text, $size, $wordsafe, $add_ellipsis, $min_wordsafe_length);
  return $text;
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Views aggregation adds aggregation to all fields in the view, which is often
 * not desired. This hook will group by only the entity ID cleanly.
 *
 * @todo move to view configuration to avoid adding each view ID here.
 */
function cn_core_query_group_by_entity_id_alter(AlterableInterface $query) {

  /** @var \Drupal\views\ViewExecutable $view */
  if ($view = $query->getMetaData('view')) {

    /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type */
    $entity_type = $view->getBaseEntityType();

    $data_table = $entity_type->getDataTable();
    $id_key = $entity_type->getKey('id');
    $group_by_table_and_field = "{$data_table}.{$id_key}";

    // Add the group by.
    $query->groupBy($group_by_table_and_field);
  }
}

/**
 * Implements hook_toolbar().
 */
function cn_core_toolbar() {

  $items = [];
  $route = \Drupal::routeMatch()->getRouteName();
  $manager = \Drupal::service('plugin.manager.menu.local_task');
  $primary = $manager->getLocalTasks($route, 0);

  foreach($primary['tabs'] as $key => $tab) {

    // add toolbar tab
    $items[$key] = [
      '#type' => 'toolbar_item',
      '#cache' => [ // Can I overrule the toolbar cache here?
        'max-age' => 0,
      ],
      'tab' => [
        '#type' => 'link',
        '#title' => $tab['#link']['title'],
        '#url' => $tab['#link']['url'],
        '#access' => $tab['#access'],
        '#attributes' => [
          'title' => $tab['#link']['title'],
        ],
      ],
      '#weight' => $tab['#weight'],
    ];

    // check if task is active
    if($tab['#active']) {
      $items[$key]['tab']['#attributes']['class'][] = 'is-active';
    }

    // get secondary tabs for each primary tab
    $route = $items[$key]['tab']['#url']->getRouteName();
    $secondary = $manager->getLocalTasks($route, 1);

    // get secondary tabs as tray
    if (!empty($secondary['tabs'])) {

      $links = [];
      $items[$key]['tab']['#attributes']['class'][] = 'toolbar-parent';

      // create renderable array of secondary links
      foreach ($secondary['tabs'] as $skey => $stab) {
        $sname = substr($skey, strrpos($key, '.') + 1);
        $links[$sname] = [
          'type' => 'link',
          'title' => $stab['#link']['title'],
          'url' => $stab['#link']['url'],
        ];
      }

      // add tray with secondary tasks
      $items[$key]['tray'] = [
        '#heading' => t('Secondary tasks'),
        'toolbar_secondary_tasks' => [
          '#theme' => 'links__toolbar',
          '#links' => $links,
          '#attributes' => ['class' => ['toolbar-menu']],
        ],
      ];

    }

  }

  return $items;
}

function cn_core_get_entity_bundles($entity_type = 'feeds_feed') {
  $bundles = \Drupal::entityTypeManager()->getStorage($entity_type)->loadMultiple();
  $options = [];
  foreach ($bundles as $key => $feed) {
    $options[$feed->id()] = $feed->label();
  }
  return $options;
}
