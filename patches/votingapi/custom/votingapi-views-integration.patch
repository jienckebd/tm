diff --git a/README.txt b/README.txt
index 6af979d..422245e 100644
--- a/README.txt
+++ b/README.txt
@@ -16,6 +16,12 @@ Installation
 ============
 Installing VotingAPI is pretty straightforward. Just copy the VotingAPI directory into your web site's /modules directory. Then, activate the module by visiting http://www.example.com/admin/modules, where example.com is the URL of your web site.

+Vote result views integration
+============
+To relate entities in views to their vote results, each entity type is given a "@entity_type vote result" relationship that will relate the entities to their calculated vote results. This allows you to add sorting, filtering, etc. based on vote results.
+
+Passing entity context through views currently requires that the context_entity_id is passed to the view as a contextual argument. The relationship form provides configuration to enter the context_entity_type and the argument ID to be used for the context_entity_id.
+
 Requirements
 ============
 VotingAPI requires Drupal 4.7 or later.
diff --git a/src/Entity/VoteResultViewsData.php b/src/Entity/VoteResultViewsData.php
new file mode 100644
index 0000000..d9535bf
--- /dev/nullgit st
+++ b/src/Entity/VoteResultViewsData.php
@@ -0,0 +1,21 @@
+<?php
+
+namespace Drupal\votingapi\Entity;
+
+use Drupal\views\EntityViewsData;
+use Drupal\views\EntityViewsDataInterface;
+
+/**
+ * Provides Views data for Vote entities.
+ */
+class VoteResultViewsData extends EntityViewsData implements EntityViewsDataInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getViewsData() {
+    $data = parent::getViewsData();
+    return $data;
+  }
+
+}
diff --git a/src/Plugin/views/relationship/VoteResult.php b/src/Plugin/views/relationship/VoteResult.php
new file mode 100644
index 0000000..e3740fa
--- /dev/null
+++ b/src/Plugin/views/relationship/VoteResult.php
@@ -0,0 +1,123 @@
+<?php
+
+namespace Drupal\votingapi\Plugin\views\relationship;
+
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\PageCache\ResponsePolicy\KillSwitch;
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\Core\Url;
+use Drupal\user\RoleInterface;
+use Drupal\views\Plugin\views\relationship\RelationshipPluginBase;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Provides a views relationship to select flag content by a flag.
+ *
+ * @ViewsRelationship("vote_result")
+ */
+class VoteResult extends RelationshipPluginBase {
+  /**
+   * {@inheritdoc}
+   */
+  public function defineOptions() {
+    $options = parent::defineOptions();
+    $options['vote_type'] = ['default' => NULL];
+    $options['vote_function'] = ['default' => NULL];
+    $options['context_entity_type'] = ['default' => NULL];
+    $options['context_entity_id_arg'] = ['default' => NULL];
+    return $options;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildOptionsForm(&$form, FormStateInterface $form_state) {
+    parent::buildOptionsForm($form, $form_state);
+
+    $entity_type_manager = \Drupal::entityTypeManager();
+
+    $vote_types = $entity_type_manager
+      ->getStorage('vote_type')->loadMultiple();
+
+    $options_vote_type = [];
+
+    foreach ($vote_types as $vote_type) {
+      $options_vote_type[$vote_type->id()] = $vote_type->label();
+    }
+
+    $form['vote_type'] = [
+      '#type' => 'radios',
+      '#title' => $this->t('Vote Type'),
+      '#options' => $options_vote_type,
+      '#default_value' => $this->options['vote_type'],
+      '#required' => TRUE,
+    ];
+
+    $vote_function_manager = \Drupal::service('plugin.manager.votingapi.resultfunction');
+
+    $options_vote_function = [];
+    foreach ($vote_function_manager->getDefinitions() as $vote_function) {
+      $options_vote_function[$vote_function['id']] = $vote_function['label'];
+    }
+
+    $form['vote_function'] = [
+      '#type' => 'radios',
+      '#title' => $this->t('Vote Function'),
+      '#options' => $options_vote_function,
+      '#default_value' => $this->options['vote_function'],
+      '#required' => TRUE,
+    ];
+
+    $form['context_entity_type'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Context Entity Type'),
+      '#default_value' => $this->options['context_entity_type'],
+    ];
+
+    $form['context_entity_id_arg'] = [
+      '#type' => 'number',
+      '#title' => $this->t('Context Entity ID Argument'),
+      '#description' => $this->t('Decide which view argument will be passed as the context entity ID.'),
+      '#default_value' => $this->options['context_entity_id_arg'],
+    ];
+
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function query() {
+
+    if ($this->options['vote_type']) {
+      $this->definition['extra'][] = [
+        'field' => 'type',
+        'value' => $this->options['vote_type'],
+      ];
+    }
+
+    if ($this->options['vote_function']) {
+      $this->definition['extra'][] = [
+        'field' => 'function',
+        'value' => $this->options['vote_function'],
+      ];
+    }
+
+    if ($this->options['context_entity_type']) {
+      $this->definition['extra'][] = [
+        'field' => 'context_entity_type',
+        'value' => $this->options['context_entity_type'],
+      ];
+
+      $context_entity_id_arg = $this->view->argument['nid']->getValue();
+      if (!empty($context_entity_id_arg)) {
+        $this->definition['extra'][] = [
+          'field' => 'context_entity_id',
+          'value' => $context_entity_id_arg,
+        ];
+      }
+    }
+
+    parent::query();
+  }
+
+}
diff --git a/votingapi.views.inc b/votingapi.views.inc
new file mode 100644
index 0000000..53dde01
--- /dev/null
+++ b/votingapi.views.inc
@@ -0,0 +1,36 @@
+<?php
+
+/**
+ * @file
+ * Contains views API hooks for Flag module.
+ */
+
+/**
+ * Implements hook_views_data_alter().
+ */
+function votingapi_views_data_alter(array &$data) {
+  $entity_type_manager = \Drupal::entityTypeManager();
+
+  foreach ($entity_type_manager->getDefinitions() as $entity_type) {
+
+    $entity_type_id = $entity_type->id();
+    if (!$entity_type->hasHandlerClass('views_data')) {
+      continue;
+    }
+
+    $base_table = $entity_type_manager->getHandler($entity_type_id, 'views_data')->getViewsTableForEntityType($entity_type);
+    $data[$base_table]['vote_result'] = [
+      'title' => t('@entity_label vote result', ['@entity_label' => $entity_type->getLabel()]),
+      'help' => t('Relate this entity to its vote results.'),
+      'relationship' => [
+        'group' => t('Vote Result'),
+        'label' => t('Vote Result'),
+        'base' => 'votingapi_result',
+        'base field' => 'entity_id',
+        'relationship field' => $entity_type->getKey('id'),
+        'id' => 'vote_result',
+      ],
+    ];
+  }
+
+}
